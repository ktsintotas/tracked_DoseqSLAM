% 

% Copyright 2020, Konstantinos Tsintotas
% ktsintot@pme.duth.gr
%
% This file is part of Tracking-DOseqSLAM framework for loop closure
% detection
%
% racking-DOseqSLAM framework is free software: you can redistribute 
% it and/or modify it under the terms of the MIT License as 
% published by the corresponding authors.
%  
% racking-DOseqSLAM pipeline is distributed in the hope that it will be 
% useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% MIT License for more details. <https://opensource.org/licenses/MIT>

function  [results, timer] = doFindSequencesTDO(results, visualData, timer)

    disp('Calculating dynamic sequences ...');

    sequenceCounter = 0;
    sequenceLength(1) = 1;
    trackedPoints = cell(1, visualData.imagesLoaded);
    trackedPointsValidity = cell(1, visualData.imagesLoaded);
    remainingPoints = cell(1, visualData.imagesLoaded);
    timer.pointsTracking = zeros(visualData.imagesLoaded, 1);
    
    It = 1;
    % returns a point tracker object that tracks a set of points in a video.
    pointTracker = vision.PointTracker('NumPyramidLevels', 3, 'MaxBidirectionalError', 3); 
    initialize(pointTracker,  visualData.points{It}.Location, visualData.inputImage{It});

     for It = 2 : visualData.imagesLoaded

         if It > 2
             previousIt = It - 1;
             release(pointTracker);
             % define a place
             if isempty(remainingPoints{previousIt})
                 % declaration of new starting points for tracker
                 initialize(pointTracker, visualData.points{previousIt}.Location, visualData.inputImage{previousIt});
                 % hold the number of created sequences
                 sequenceCounter = sequenceCounter + 1;
                 % sequenceLength(sequenceCounter) = imagesCounter; % Size of sequence of images
                 if sequenceCounter == 1
                     % size of sequence of images
                     sequenceLength(sequenceCounter) = (previousIt-1) - (sequenceLength(sequenceCounter)-1 );
                 else
                     % size of sequence of images
                     sequenceLength(sequenceCounter) = (previousIt-1) - (lastImagesAtSequence(sequenceCounter-1)+1);
                 end
                 % images at sequence
                 lastImagesAtSequence(sequenceCounter) = (previousIt-1);
             else
                 initialize(pointTracker, remainingPoints{previousIt}, visualData.inputImage{previousIt});
             end
         end
         
         % start the timer for the point tracker
         tic
         % tracked points in the incoming frame
         [trackedPoints{It}, trackedPointsValidity{It}] = pointTracker(visualData.inputImage{It});
         % stop the timer for the point tracker
         timer.pointsTracking(It, 1) = toc;
         
         % the remaining points which are gonna feed to the tracker the next instance
         remainingPoints{It} = trackedPoints{It}(trackedPointsValidity{It}==true, :);

         if size(remainingPoints{It}, 1) >= 1 && It == visualData.imagesLoaded
             % hold the number of created sequences
             sequenceCounter = sequenceCounter + 1; 
             % size of sequence of images
             sequenceLength(sequenceCounter) = visualData.imagesLoaded - (lastImagesAtSequence(sequenceCounter-1)+1); 
             % images at sequence
             lastImagesAtSequence(sequenceCounter) =  It; 
         end

     end
        
         results.lastImagesAtSequence = lastImagesAtSequence;
         results.sequenceLength = sequenceLength;
            
end
